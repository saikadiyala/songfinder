{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","className","CardList","s","map","person","i","SearchBox","token","state","query","songs","onChange","e","value","target","setState","search","as","url","fetch","then","response","json","res","results","forEach","val","push","trackName","this","type","placeholder","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAeeA,EAbF,SAAC,GAAa,IAAXC,EAAU,EAAVA,KAEd,OAEE,yBAAKC,UAAU,uDAEX,4BAAKD,KCeEE,EApBE,SAAC,GAAU,IAARC,EAAO,EAAPA,EAClB,OACE,6BAEIA,EAAEC,KAAI,SAACC,EAAQC,GACb,OAEE,kBAAC,EAAD,CAEEN,KAAMG,EAAEG,UCiDPC,E,4MAzDbC,MAAQ,K,EACRC,MAAQ,CACNC,MAAO,GACPC,MAAO,I,EAGTC,SAAW,SAAAC,GAAM,IACPC,EAAUD,EAAEE,OAAZD,MACR,EAAKE,SAAS,CACZN,MAAOI,IAGT,EAAKG,OAAOH,I,EAGdG,OAAS,SAAAP,GACP,IAAIQ,EAAG,GACDC,EAAG,mFAA+ET,GAClFF,EAAQ,GACd,EAAKA,MAAQA,EAEbY,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GACA,EAAKhB,QAAUA,IACjBgB,EAAIC,QAAQC,SAAQ,SAASC,GAC5BT,EAAGU,KAAKD,EAAIE,cAEb,EAAKb,SAAS,CAACL,MAAMO,S,kEAO3BY,KAAKb,OAAO,M,+BAIZ,OACD,6BACE,sDACC,8BACE,2BACEc,KAAK,OACL9B,UAAU,aACV+B,YAAY,mBACZpB,SAAUkB,KAAKlB,WAElB,kBAAC,EAAD,CAAUT,EAAG2B,KAAKrB,MAAME,c,GAlDPsB,IAAMC,WCmBfC,G,mLAXX,OAEG,yBAAKlC,UAAU,aAChB,kBAAC,EAAD,W,GATYiC,cCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fad1e19a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name}) => {\n    \n  return (\n      \n    <div className='center mw5 tc v-mid pa0  grow bg-light-gray br1 ma1'>\n           \n        <h2>{name}</h2>\n       \n     \n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ s}) => {\n  return (\n    <div>\n      {\n        s.map((person, i) => {\n          return (\n           \n            <Card \n             \n              name={s[i]}\n              \n              />\n              \n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\nimport CardList from './CardList.js';\n\nclass SearchBox extends React.Component {\n  token = null;\n  state = {\n    query: \"\",\n    songs: []\n  };\n\n  onChange = e => {\n    const { value } = e.target;\n    this.setState({\n      query: value\n    });\n\n    this.search(value);\n  };\n\n  search = query => {\n    var as=[];\n    const url = `https://cors-anywhere.herokuapp.com/https://itunes.apple.com/search?term=${query}`;\n    const token = {};\n    this.token = token;\n\n    fetch(url)\n      .then(response=> response.json())\n      .then(res => {\n        if (this.token === token) {\n          res.results.forEach(function(val){\n           as.push(val.trackName);\n          })\n          this.setState({songs:as})            \n        }\n      });\n      \n      \n  };\n  componentDidMount() {\n    this.search(\"\");\n  }\n\n  render() {\n    return (\n   <div >\n     <h1>Find your Artist songs</h1>\n      <form >\n        <input \n          type=\"text\"\n          className=\"search-box\"\n          placeholder=\"Give artist name\"\n          onChange={this.onChange}\n        />\n       <CardList s={this.state.songs} />\n      </form>\n      </div>\n      \n    );\n  }\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport 'tachyons';\n\nclass App extends Component {\n  \n\n \n\n  render() {\n    return(\n    \n       <div className=\"center tc\">\n      <SearchBox/>\n       </div>\n     );\n        \n      \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}